
Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
(v1) = read(v1) * 2;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
(v1) = read(v1) * 2;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(Ref(int) v1;(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
Ref(int) v1
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(int cnt;(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
int cnt
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(new(v1, 2);(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
new(v1, 2)
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (0, int)
Output:
File table:
Heap:


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(newSemaphore( cnt, read(v1), 1);(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
newSemaphore( cnt, read(v1), 1)
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 0
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))));(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))))
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))));(acquire( cnt );(print(read(v1) - 1);release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
Fork((acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))))
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
(acquire( cnt );(print(read(v1) - 1);release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
((v1) = read(v1) * 10;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
(acquire( cnt );((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 14
Execution stack:
(v1) = read(v1) * 10;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 2


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
acquire( cnt )
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
(print(read(v1) - 1);release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
print(read(v1) - 1)
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
acquire( cnt )
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
((v1) = read(v1) * 10;;((v1) = read(v1) * 2;;(print(read(v1));release( cnt ))))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 15
Execution stack:
(v1) = read(v1) * 10;
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 20


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
((v1) = read(v1) * 2;;(print(read(v1));release( cnt )))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
(v1) = read(v1) * 2;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 15
Execution stack:
(v1) = read(v1) * 2;
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 200


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
(print(read(v1));release( cnt ))
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
print(read(v1))
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
release( cnt )
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 13
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 14
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400


Thread ID: 15
Execution stack:
Symbol table:
cnt -> 1
v1 -> (1, int)
Output:
20
19
400
File table:
Heap:
1 -> 400

